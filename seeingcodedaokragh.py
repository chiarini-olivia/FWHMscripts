# -*- coding: utf-8 -*-
"""SeeingCodeDAOKragh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/187DB4F7xlMi3MvoGQisxilpT_5H_aRBL
"""

!pip install photutils

from astropy.io import fits
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import curve_fit
from photutils.detection import DAOStarFinder, IRAFStarFinder

from google.colab import drive
drive.mount('/content/drive')

# PUT THE PATH TO THE FILE HERE

#fileName = "/content/drive/Shareddrives/UMBC Observatory/Observations/SharpCap Captures/2023-10-23/Seeing_hd209128/21_10_02/Seeing_hd209128_00001.fits"
#fileName = "/content/drive/Shareddrives/UMBC Observatory/Observations/SharpCap Captures/2023-10-18/ngc1501_v_300s_asi432mm/23_24_08/ngc1501_v_300s_asi432mm_00001.fits"
#fileName = "/content/drive/Shareddrives/UMBC Observatory/Observations/SharpCap Captures/2023-11-01/hd222603_seeing_ag_V/23_23_18/hd222603_seeing_ag_V_00001.fits"
fileName = "/content/drive/Shareddrives/UMBC Observatory/Observations/SharpCap Captures/2023-07-11/20230711_M57_180s_phd2ON/23_34_10/20230711_M57_180s_phd2ON_00001.fits"

# opens the given file
hduList = fits.open(fileName)

# takes first hdu
hdu = hduList[0]

# plots the image in grayscale
plt.imshow(hdu.data, cmap = 'gray')

# prints bit size and image dimensions
print(hdu.header["BITPIX"], hdu.data.shape)

# finding statistical values
mean, median, std, max = np.mean(hdu.data), np.median(hdu.data), np.std(hdu.data), np.max(hdu.data)
#print(f"Data Mean: {mean}\nData Median: {median}\nData STD: {std}\nData Max: {max}")

# builds a list of things that may be sources
skyBrightness = 500
starFind = DAOStarFinder(threshold=median, fwhm=20.0, sky=skyBrightness, exclude_border=True, brightest=10, peakmax=70000)
sources = starFind(hdu.data)
print(sources)

# This block checks how many usable sources are present in the image (max of 10)
# A source must have a peak value > 10*skyBrightness in sources array
# This peak value threshold is arbitrary and is only there to prevent hot pixels etc. from contaminating the data
# The list of real sources is created based on the starfind data
numOfSources = 0
for x in sources:
  if x["peak"] > 10*skyBrightness:
    # the list of sources itself is not changed, the loop control variable is
    numOfSources = numOfSources + 1

print(numOfSources)

# plots the image again
plt.imshow(hdu.data, cmap='gray')

# places a ring around each source in the list
for source in sources[:numOfSources]:
  plt.scatter(int(source[1]), int(source[2]), facecolors='none', edgecolors='r')

# defining properties of a gaussian fit
def gauss(x, mu, sigma, amplitude, offset):
  return amplitude * np.exp(-((x-mu)/sigma)**2/2) + offset

dx = int(50/2)
dy = int(50/2)

# Creates and analyzes profiles for each source
for source in sources[:numOfSources]:
  # builds a subframe encasing the source
  xMin, xMax = int(source['ycentroid']) - dx, int(source['ycentroid']) + dx
  yMin, yMax = int(source['xcentroid']) - dy, int(source['xcentroid']) + dy
  subFrame = hdu.data[xMin:xMax,yMin:yMax]

  # builds histogram x axis
  xAxis = np.linspace(0,50,50)

  # builds x and y gaussian fits
  ansx = curve_fit(gauss, xdata=xAxis, ydata=subFrame[dx,:], p0=[50,20,1000,500])
  mux, sigmax, ampx, offx = ansx[0][0], ansx[0][1], ansx[0][2], ansx[0][3]

  ansy = curve_fit(gauss, xdata=xAxis, ydata=subFrame[:,dy], p0=[50,20,1000,500])
  muy, sigmay, ampy, offy = ansy[0][0], ansy[0][1], ansy[0][2], ansy[0][3]

  # calculate the x and y fwhm values
  fwhmX = (2*pow(2*np.log(2), 0.5))*sigmax
  fwhmY = (2*pow(2*np.log(2), 0.5))*sigmay

  # prints all statistical data for the current source
  print(f"Source {source['id']}")
  print(f"X{source['id']}:\nmu = {mux}\nsigma = {sigmax}\n amp = {ampx}\noff = {offx}\nfwhm = {fwhmX}\n")
  print(f"Y{source['id']}:\nmu = {muy}\nsigma = {sigmay}\n amp = {ampy}\noff = {offy}\nfwhm = {fwhmY}\n-----")

  # prints image of the source currently showing
  plt.figure()
  plt.imshow(subFrame, cmap='gray')
  plt.plot(dx,dy,'r.')

  # prints the pixel values with gaussian fits
  plt.figure()
  plt.plot(subFrame[:, dy], 'b.', label='hori')
  plt.plot(subFrame[dx, :], 'r.', label='vert')
  plt.plot(xAxis, gauss(xAxis, muy, sigmay, ampy, offy), 'b-')
  plt.plot(xAxis, gauss(xAxis, mux, sigmax, ampx, offx), 'r-')
  plt.legend(loc=0)